1) 
void onDisconnect(BLEServer* pServer, esp_ble_gatts_cb_param_t *param); 

was added to BLEServerCallbacks in order to allow to know MAC-address of disconnected devices.
It's usage was implemented the same way onConnect was.

2) 
void onConnect(BLEClient *pClient) {};
void onConnect(BLEClient *pClient, esp_ble_gatts_cb_param_t *param) {};
void onDisconnect(BLEClient *pClient) {};
void onDisconnect(BLEClient *pClient, esp_ble_gatts_cb_param_t *param) {}; 

was added to BLEClientCallbacks. Reason is simmilar to the reason above.

3) 
to BLERemoteCharacteristic.h:
BLERemoteCharacteristicCallback *m_callback;

to BLERemoteCharacteristic.cpp:
m_callback = nullptr; // inside Constructor !!!

// sepatate method!!!
// MUST BE INVOKED BEFORE registerForNotify(). 
// Then any nonnull static function must Func must be passed to registerForNotify()
// Like registerForNotify(Func); / static void Func(...) {}  /
void BLERemoteCharacteristic::setCallback(BLERemoteCharacteristicCallback* pCallbacks) {
	m_callback = pCallbacks;
}

to BLERemoteCharacteristic::gattClientEventHandler case ESP_GATTC_NOTIFY_EVT:
m_callback->onNotify(this, evtParam);

4) (No use of this addition as it's possible to pass 0 to ->start(0) to use scanner forever!)
to BLEScan.cpp, to handleGAPEvent(), to case ESP_GAP_SEARCH_INQ_CMPL_EVT, before break; :
if (m_pAdvertisedDeviceCallbacks != nullptr) {
	m_pAdvertisedDeviceCallbacks->onScanStoped(this);
}

to BLEAdvertisedDevice.h, to BLEAdvertisedDeviceCallbacks class:
virtual void onScanStoped(BLEScan* scanner) = 0;


